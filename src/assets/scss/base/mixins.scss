//
// Mixins
// --------------------------------------------------
@use "sass:math";

@function em($pixels, $context: $base-font-size) {
  @return #{math.div($pixels, $context)}em;
}

@mixin placeholder {
  &::-webkit-input-placeholder {
    /* WebKit, Blink, Edge */
    @content;
  }

  &:-moz-placeholder {
    /* Mozilla Firefox 4 to 18 */
    @content;
  }

  &::-moz-placeholder {
    /* Mozilla Firefox 19+ */
    @content;
  }

  &:-ms-input-placeholder {
    /* Microsoft Edge,  Internet Explorer 10-11 */
    @content;
  }

  &::placeholder {
    /* Most modern browsers support this now. */
    @content;
  }
}

@mixin autoFill($color) {
  &:-webkit-autofill:hover,
  &:-webkit-autofill:focus,
  &:-webkit-autofill {
    background: transparent;
    -webkit-box-shadow: 0 0 0 em(1000) transparent inset;
    transition: background-color 9999s ease-in-out 0s;
    -webkit-text-fill-color: $color;
  }
}

@mixin hover {
  @media (hover), (min-width: 0\0), (min--moz-device-pixel-ratio: 0) {
    &:hover {
      @content;
    }
  }
}

@mixin mediaIE10 {
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
    /* IE10+ specific styles go here */
    @content;
  }
}

// https://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value * 10}px;

    @if $i < $max {
      $pxValues: #{$pxValues + ' '};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + ' '};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}

// Clearfix
@mixin clearfix {
  &::before,
  &::after {
    display: table;
    content: '';
  }

  &::after {
    clear: both;
  }
}

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// Resize anything
@mixin resizable($direction) {
  overflow: auto; // Safari fix
  resize: $direction; // Options: horizontal, vertical, both
}

@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  -webkit-animation: $animations;
  -moz-animation: $animations;
  -o-animation: $animations;
  animation: $animations;

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ', '};
    }
  }
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }

  @-moz-keyframes #{$animationName} {
    @content;
  }

  @-o-keyframes #{$animationName} {
    @content;
  }

  @keyframes #{$animationName} {
    @content;
  }
}

@mixin btnDecorator($color) {
  position: absolute;
  right: 0;
  bottom: 0;
  z-index: -1;
  width: 100%;
  height: 100%;
  background: $color;
  transition: $transTimeFast $linear;
}

@mixin positionNull() {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

@mixin positionCenter() {
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@function getSizeWidth($pixel, $default-width: 1920) {
  @return #{($pixel / $default-width) * 100}vw;
}

@function getSizeHeight($pixel, $default-height: 1080) {
  @return #{($pixel / $default-height) * 100}vh;
}

@mixin fitObjectByViewPort($offsetX, $offsetY, $width, $height) {
  width: getsizewidth($width);
  height: getsizewidth($height);
  margin-top: getsizewidth($offsetY);
  margin-left: getsizewidth($offsetX);

  @media (max-aspect-ratio: 16/9) {
    width: getsizeheight($width);
    height: getsizeheight($height);
    margin-top: getsizeheight($offsetY);
    margin-left: getsizeheight($offsetX);
  }
}

@mixin fitObject($offsetX, $offsetY, $width, $height, $rotate: 0, $inverted: false) {
  @include positionCenter();

  width: em($width);
  height: em($height);
  margin-top: em($offsetY);
  margin-left: em($offsetX);

  @if ($inverted) {
    transform: translate(-50%, -50%) rotate(#{$rotate}deg);
  }

  @else {
    transform: translate(-50%, 50%) rotate(#{$rotate}deg);
  }
}

// @mixin is-mobile() {
//   @at-root .js-is-mobile & {
//     @content;
//   }
// }

// @mixin is-laptop() {
//   @at-root .js-is-laptops & {
//     @content;
//   }
// }

// @mixin is-horizontal() {
//   @at-root .js-is-horizontal & {
//     @content;
//   }
// }

// @mixin is-desktop() {
//   @at-root .js-is-desktop & {
//     @content;
//   }
// }
